/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_service_H
#define rpc_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "rpc_types.h"

namespace confluo { namespace rpc {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class rpc_serviceIf {
 public:
  virtual ~rpc_serviceIf() {}

  /**
   * Management ops *
   */
  virtual void register_handler() = 0;
  virtual void deregister_handler() = 0;
  virtual int64_t create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode) = 0;
  virtual void get_atomic_multilog_info(rpc_atomic_multilog_info& _return, const std::string& name) = 0;
  virtual void remove_atomic_multilog(const int64_t multilog_id) = 0;
  virtual void add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size) = 0;
  virtual void remove_index(const int64_t multilog_id, const std::string& field_name) = 0;
  virtual void add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr) = 0;
  virtual void remove_filter(const int64_t multilog_id, const std::string& filter_name) = 0;
  virtual void add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr) = 0;
  virtual void remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name) = 0;
  virtual void add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr) = 0;
  virtual void remove_trigger(const int64_t multilog_id, const std::string& trigger_name) = 0;

  /**
   * Query ops *
   * 
   * @param multilog_id
   * @param data
   */
  virtual int64_t append(const int64_t multilog_id, const std::string& data) = 0;
  virtual int64_t append_batch(const int64_t multilog_id, const rpc_record_batch& batch) = 0;
  virtual void read(std::string& _return, const int64_t multilog_id, const int64_t offset, const int64_t nrecords) = 0;
  virtual void query_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void adhoc_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr) = 0;
  virtual void adhoc_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_expr) = 0;
  virtual void predef_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void combined_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void alerts_by_time(rpc_iterator_handle& _return, const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void alerts_by_trigger_and_time(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void get_more(rpc_iterator_handle& _return, const int64_t multilog_id, const rpc_iterator_descriptor& desc) = 0;
  virtual int64_t num_records(const int64_t multilog_id) = 0;
};

class rpc_serviceIfFactory {
 public:
  typedef rpc_serviceIf Handler;

  virtual ~rpc_serviceIfFactory() {}

  virtual rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(rpc_serviceIf* /* handler */) = 0;
};

class rpc_serviceIfSingletonFactory : virtual public rpc_serviceIfFactory {
 public:
  rpc_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<rpc_serviceIf>& iface) : iface_(iface) {}
  virtual ~rpc_serviceIfSingletonFactory() {}

  virtual rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(rpc_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> iface_;
};

class rpc_serviceNull : virtual public rpc_serviceIf {
 public:
  virtual ~rpc_serviceNull() {}
  void register_handler() {
    return;
  }
  void deregister_handler() {
    return;
  }
  int64_t create_atomic_multilog(const std::string& /* name */, const rpc_schema& /* schema */, const rpc_storage_mode /* mode */) {
    int64_t _return = 0;
    return _return;
  }
  void get_atomic_multilog_info(rpc_atomic_multilog_info& /* _return */, const std::string& /* name */) {
    return;
  }
  void remove_atomic_multilog(const int64_t /* multilog_id */) {
    return;
  }
  void add_index(const int64_t /* multilog_id */, const std::string& /* field_name */, const double /* bucket_size */) {
    return;
  }
  void remove_index(const int64_t /* multilog_id */, const std::string& /* field_name */) {
    return;
  }
  void add_filter(const int64_t /* multilog_id */, const std::string& /* filter_name */, const std::string& /* filter_expr */) {
    return;
  }
  void remove_filter(const int64_t /* multilog_id */, const std::string& /* filter_name */) {
    return;
  }
  void add_aggregate(const int64_t /* mutlilog_id */, const std::string& /* aggregate_name */, const std::string& /* filter_name */, const std::string& /* aggregate_expr */) {
    return;
  }
  void remove_aggregate(const int64_t /* multilog_id */, const std::string& /* aggregate_name */) {
    return;
  }
  void add_trigger(const int64_t /* multilog_id */, const std::string& /* trigger_name */, const std::string& /* trigger_expr */) {
    return;
  }
  void remove_trigger(const int64_t /* multilog_id */, const std::string& /* trigger_name */) {
    return;
  }
  int64_t append(const int64_t /* multilog_id */, const std::string& /* data */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t append_batch(const int64_t /* multilog_id */, const rpc_record_batch& /* batch */) {
    int64_t _return = 0;
    return _return;
  }
  void read(std::string& /* _return */, const int64_t /* multilog_id */, const int64_t /* offset */, const int64_t /* nrecords */) {
    return;
  }
  void query_aggregate(std::string& /* _return */, const int64_t /* multilog_id */, const std::string& /* aggregate_name */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void adhoc_aggregate(std::string& /* _return */, const int64_t /* multilog_id */, const std::string& /* aggregate_expr */, const std::string& /* filter_expr */) {
    return;
  }
  void adhoc_filter(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const std::string& /* filter_expr */) {
    return;
  }
  void predef_filter(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const std::string& /* filter_name */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void combined_filter(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const std::string& /* filter_name */, const std::string& /* filter_expr */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void alerts_by_time(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void alerts_by_trigger_and_time(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const std::string& /* trigger_name */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void get_more(rpc_iterator_handle& /* _return */, const int64_t /* multilog_id */, const rpc_iterator_descriptor& /* desc */) {
    return;
  }
  int64_t num_records(const int64_t /* multilog_id */) {
    int64_t _return = 0;
    return _return;
  }
};


class rpc_service_register_handler_args {
 public:

  rpc_service_register_handler_args(const rpc_service_register_handler_args&);
  rpc_service_register_handler_args& operator=(const rpc_service_register_handler_args&);
  rpc_service_register_handler_args() {
  }

  virtual ~rpc_service_register_handler_args() throw();

  bool operator == (const rpc_service_register_handler_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_service_register_handler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_register_handler_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_register_handler_pargs {
 public:


  virtual ~rpc_service_register_handler_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_register_handler_result__isset {
  _rpc_service_register_handler_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_register_handler_result__isset;

class rpc_service_register_handler_result {
 public:

  rpc_service_register_handler_result(const rpc_service_register_handler_result&);
  rpc_service_register_handler_result& operator=(const rpc_service_register_handler_result&);
  rpc_service_register_handler_result() {
  }

  virtual ~rpc_service_register_handler_result() throw();
  rpc_management_exception ex;

  _rpc_service_register_handler_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_register_handler_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_register_handler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_register_handler_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_register_handler_presult__isset {
  _rpc_service_register_handler_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_register_handler_presult__isset;

class rpc_service_register_handler_presult {
 public:


  virtual ~rpc_service_register_handler_presult() throw();
  rpc_management_exception ex;

  _rpc_service_register_handler_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class rpc_service_deregister_handler_args {
 public:

  rpc_service_deregister_handler_args(const rpc_service_deregister_handler_args&);
  rpc_service_deregister_handler_args& operator=(const rpc_service_deregister_handler_args&);
  rpc_service_deregister_handler_args() {
  }

  virtual ~rpc_service_deregister_handler_args() throw();

  bool operator == (const rpc_service_deregister_handler_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_service_deregister_handler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_deregister_handler_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_deregister_handler_pargs {
 public:


  virtual ~rpc_service_deregister_handler_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_deregister_handler_result__isset {
  _rpc_service_deregister_handler_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_deregister_handler_result__isset;

class rpc_service_deregister_handler_result {
 public:

  rpc_service_deregister_handler_result(const rpc_service_deregister_handler_result&);
  rpc_service_deregister_handler_result& operator=(const rpc_service_deregister_handler_result&);
  rpc_service_deregister_handler_result() {
  }

  virtual ~rpc_service_deregister_handler_result() throw();
  rpc_management_exception ex;

  _rpc_service_deregister_handler_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_deregister_handler_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_deregister_handler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_deregister_handler_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_deregister_handler_presult__isset {
  _rpc_service_deregister_handler_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_deregister_handler_presult__isset;

class rpc_service_deregister_handler_presult {
 public:


  virtual ~rpc_service_deregister_handler_presult() throw();
  rpc_management_exception ex;

  _rpc_service_deregister_handler_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_create_atomic_multilog_args__isset {
  _rpc_service_create_atomic_multilog_args__isset() : name(false), schema(false), mode(false) {}
  bool name :1;
  bool schema :1;
  bool mode :1;
} _rpc_service_create_atomic_multilog_args__isset;

class rpc_service_create_atomic_multilog_args {
 public:

  rpc_service_create_atomic_multilog_args(const rpc_service_create_atomic_multilog_args&);
  rpc_service_create_atomic_multilog_args& operator=(const rpc_service_create_atomic_multilog_args&);
  rpc_service_create_atomic_multilog_args() : name(), mode((rpc_storage_mode)0) {
  }

  virtual ~rpc_service_create_atomic_multilog_args() throw();
  std::string name;
  rpc_schema schema;
  rpc_storage_mode mode;

  _rpc_service_create_atomic_multilog_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_schema(const rpc_schema& val);

  void __set_mode(const rpc_storage_mode val);

  bool operator == (const rpc_service_create_atomic_multilog_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(schema == rhs.schema))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const rpc_service_create_atomic_multilog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_create_atomic_multilog_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_create_atomic_multilog_pargs {
 public:


  virtual ~rpc_service_create_atomic_multilog_pargs() throw();
  const std::string* name;
  const rpc_schema* schema;
  const rpc_storage_mode* mode;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_create_atomic_multilog_result__isset {
  _rpc_service_create_atomic_multilog_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_create_atomic_multilog_result__isset;

class rpc_service_create_atomic_multilog_result {
 public:

  rpc_service_create_atomic_multilog_result(const rpc_service_create_atomic_multilog_result&);
  rpc_service_create_atomic_multilog_result& operator=(const rpc_service_create_atomic_multilog_result&);
  rpc_service_create_atomic_multilog_result() : success(0) {
  }

  virtual ~rpc_service_create_atomic_multilog_result() throw();
  int64_t success;
  rpc_management_exception ex;

  _rpc_service_create_atomic_multilog_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_create_atomic_multilog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_create_atomic_multilog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_create_atomic_multilog_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_create_atomic_multilog_presult__isset {
  _rpc_service_create_atomic_multilog_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_create_atomic_multilog_presult__isset;

class rpc_service_create_atomic_multilog_presult {
 public:


  virtual ~rpc_service_create_atomic_multilog_presult() throw();
  int64_t* success;
  rpc_management_exception ex;

  _rpc_service_create_atomic_multilog_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_get_atomic_multilog_info_args__isset {
  _rpc_service_get_atomic_multilog_info_args__isset() : name(false) {}
  bool name :1;
} _rpc_service_get_atomic_multilog_info_args__isset;

class rpc_service_get_atomic_multilog_info_args {
 public:

  rpc_service_get_atomic_multilog_info_args(const rpc_service_get_atomic_multilog_info_args&);
  rpc_service_get_atomic_multilog_info_args& operator=(const rpc_service_get_atomic_multilog_info_args&);
  rpc_service_get_atomic_multilog_info_args() : name() {
  }

  virtual ~rpc_service_get_atomic_multilog_info_args() throw();
  std::string name;

  _rpc_service_get_atomic_multilog_info_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const rpc_service_get_atomic_multilog_info_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const rpc_service_get_atomic_multilog_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_get_atomic_multilog_info_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_get_atomic_multilog_info_pargs {
 public:


  virtual ~rpc_service_get_atomic_multilog_info_pargs() throw();
  const std::string* name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_get_atomic_multilog_info_result__isset {
  _rpc_service_get_atomic_multilog_info_result__isset() : success(false) {}
  bool success :1;
} _rpc_service_get_atomic_multilog_info_result__isset;

class rpc_service_get_atomic_multilog_info_result {
 public:

  rpc_service_get_atomic_multilog_info_result(const rpc_service_get_atomic_multilog_info_result&);
  rpc_service_get_atomic_multilog_info_result& operator=(const rpc_service_get_atomic_multilog_info_result&);
  rpc_service_get_atomic_multilog_info_result() {
  }

  virtual ~rpc_service_get_atomic_multilog_info_result() throw();
  rpc_atomic_multilog_info success;

  _rpc_service_get_atomic_multilog_info_result__isset __isset;

  void __set_success(const rpc_atomic_multilog_info& val);

  bool operator == (const rpc_service_get_atomic_multilog_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_get_atomic_multilog_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_get_atomic_multilog_info_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_get_atomic_multilog_info_presult__isset {
  _rpc_service_get_atomic_multilog_info_presult__isset() : success(false) {}
  bool success :1;
} _rpc_service_get_atomic_multilog_info_presult__isset;

class rpc_service_get_atomic_multilog_info_presult {
 public:


  virtual ~rpc_service_get_atomic_multilog_info_presult() throw();
  rpc_atomic_multilog_info* success;

  _rpc_service_get_atomic_multilog_info_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_remove_atomic_multilog_args__isset {
  _rpc_service_remove_atomic_multilog_args__isset() : multilog_id(false) {}
  bool multilog_id :1;
} _rpc_service_remove_atomic_multilog_args__isset;

class rpc_service_remove_atomic_multilog_args {
 public:

  rpc_service_remove_atomic_multilog_args(const rpc_service_remove_atomic_multilog_args&);
  rpc_service_remove_atomic_multilog_args& operator=(const rpc_service_remove_atomic_multilog_args&);
  rpc_service_remove_atomic_multilog_args() : multilog_id(0) {
  }

  virtual ~rpc_service_remove_atomic_multilog_args() throw();
  int64_t multilog_id;

  _rpc_service_remove_atomic_multilog_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  bool operator == (const rpc_service_remove_atomic_multilog_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_atomic_multilog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_atomic_multilog_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_atomic_multilog_pargs {
 public:


  virtual ~rpc_service_remove_atomic_multilog_pargs() throw();
  const int64_t* multilog_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_atomic_multilog_result__isset {
  _rpc_service_remove_atomic_multilog_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_atomic_multilog_result__isset;

class rpc_service_remove_atomic_multilog_result {
 public:

  rpc_service_remove_atomic_multilog_result(const rpc_service_remove_atomic_multilog_result&);
  rpc_service_remove_atomic_multilog_result& operator=(const rpc_service_remove_atomic_multilog_result&);
  rpc_service_remove_atomic_multilog_result() {
  }

  virtual ~rpc_service_remove_atomic_multilog_result() throw();
  rpc_management_exception ex;

  _rpc_service_remove_atomic_multilog_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_remove_atomic_multilog_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_atomic_multilog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_atomic_multilog_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_atomic_multilog_presult__isset {
  _rpc_service_remove_atomic_multilog_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_atomic_multilog_presult__isset;

class rpc_service_remove_atomic_multilog_presult {
 public:


  virtual ~rpc_service_remove_atomic_multilog_presult() throw();
  rpc_management_exception ex;

  _rpc_service_remove_atomic_multilog_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_add_index_args__isset {
  _rpc_service_add_index_args__isset() : multilog_id(false), field_name(false), bucket_size(false) {}
  bool multilog_id :1;
  bool field_name :1;
  bool bucket_size :1;
} _rpc_service_add_index_args__isset;

class rpc_service_add_index_args {
 public:

  rpc_service_add_index_args(const rpc_service_add_index_args&);
  rpc_service_add_index_args& operator=(const rpc_service_add_index_args&);
  rpc_service_add_index_args() : multilog_id(0), field_name(), bucket_size(0) {
  }

  virtual ~rpc_service_add_index_args() throw();
  int64_t multilog_id;
  std::string field_name;
  double bucket_size;

  _rpc_service_add_index_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_field_name(const std::string& val);

  void __set_bucket_size(const double val);

  bool operator == (const rpc_service_add_index_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(field_name == rhs.field_name))
      return false;
    if (!(bucket_size == rhs.bucket_size))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_index_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_add_index_pargs {
 public:


  virtual ~rpc_service_add_index_pargs() throw();
  const int64_t* multilog_id;
  const std::string* field_name;
  const double* bucket_size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_index_result__isset {
  _rpc_service_add_index_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_index_result__isset;

class rpc_service_add_index_result {
 public:

  rpc_service_add_index_result(const rpc_service_add_index_result&);
  rpc_service_add_index_result& operator=(const rpc_service_add_index_result&);
  rpc_service_add_index_result() {
  }

  virtual ~rpc_service_add_index_result() throw();
  rpc_management_exception ex;

  _rpc_service_add_index_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_add_index_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_index_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_index_presult__isset {
  _rpc_service_add_index_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_index_presult__isset;

class rpc_service_add_index_presult {
 public:


  virtual ~rpc_service_add_index_presult() throw();
  rpc_management_exception ex;

  _rpc_service_add_index_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_remove_index_args__isset {
  _rpc_service_remove_index_args__isset() : multilog_id(false), field_name(false) {}
  bool multilog_id :1;
  bool field_name :1;
} _rpc_service_remove_index_args__isset;

class rpc_service_remove_index_args {
 public:

  rpc_service_remove_index_args(const rpc_service_remove_index_args&);
  rpc_service_remove_index_args& operator=(const rpc_service_remove_index_args&);
  rpc_service_remove_index_args() : multilog_id(0), field_name() {
  }

  virtual ~rpc_service_remove_index_args() throw();
  int64_t multilog_id;
  std::string field_name;

  _rpc_service_remove_index_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_field_name(const std::string& val);

  bool operator == (const rpc_service_remove_index_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(field_name == rhs.field_name))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_index_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_index_pargs {
 public:


  virtual ~rpc_service_remove_index_pargs() throw();
  const int64_t* multilog_id;
  const std::string* field_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_index_result__isset {
  _rpc_service_remove_index_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_index_result__isset;

class rpc_service_remove_index_result {
 public:

  rpc_service_remove_index_result(const rpc_service_remove_index_result&);
  rpc_service_remove_index_result& operator=(const rpc_service_remove_index_result&);
  rpc_service_remove_index_result() {
  }

  virtual ~rpc_service_remove_index_result() throw();
  rpc_management_exception ex;

  _rpc_service_remove_index_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_remove_index_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_index_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_index_presult__isset {
  _rpc_service_remove_index_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_index_presult__isset;

class rpc_service_remove_index_presult {
 public:


  virtual ~rpc_service_remove_index_presult() throw();
  rpc_management_exception ex;

  _rpc_service_remove_index_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_add_filter_args__isset {
  _rpc_service_add_filter_args__isset() : multilog_id(false), filter_name(false), filter_expr(false) {}
  bool multilog_id :1;
  bool filter_name :1;
  bool filter_expr :1;
} _rpc_service_add_filter_args__isset;

class rpc_service_add_filter_args {
 public:

  rpc_service_add_filter_args(const rpc_service_add_filter_args&);
  rpc_service_add_filter_args& operator=(const rpc_service_add_filter_args&);
  rpc_service_add_filter_args() : multilog_id(0), filter_name(), filter_expr() {
  }

  virtual ~rpc_service_add_filter_args() throw();
  int64_t multilog_id;
  std::string filter_name;
  std::string filter_expr;

  _rpc_service_add_filter_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_filter_name(const std::string& val);

  void __set_filter_expr(const std::string& val);

  bool operator == (const rpc_service_add_filter_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_add_filter_pargs {
 public:


  virtual ~rpc_service_add_filter_pargs() throw();
  const int64_t* multilog_id;
  const std::string* filter_name;
  const std::string* filter_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_filter_result__isset {
  _rpc_service_add_filter_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_filter_result__isset;

class rpc_service_add_filter_result {
 public:

  rpc_service_add_filter_result(const rpc_service_add_filter_result&);
  rpc_service_add_filter_result& operator=(const rpc_service_add_filter_result&);
  rpc_service_add_filter_result() {
  }

  virtual ~rpc_service_add_filter_result() throw();
  rpc_management_exception ex;

  _rpc_service_add_filter_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_add_filter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_filter_presult__isset {
  _rpc_service_add_filter_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_filter_presult__isset;

class rpc_service_add_filter_presult {
 public:


  virtual ~rpc_service_add_filter_presult() throw();
  rpc_management_exception ex;

  _rpc_service_add_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_remove_filter_args__isset {
  _rpc_service_remove_filter_args__isset() : multilog_id(false), filter_name(false) {}
  bool multilog_id :1;
  bool filter_name :1;
} _rpc_service_remove_filter_args__isset;

class rpc_service_remove_filter_args {
 public:

  rpc_service_remove_filter_args(const rpc_service_remove_filter_args&);
  rpc_service_remove_filter_args& operator=(const rpc_service_remove_filter_args&);
  rpc_service_remove_filter_args() : multilog_id(0), filter_name() {
  }

  virtual ~rpc_service_remove_filter_args() throw();
  int64_t multilog_id;
  std::string filter_name;

  _rpc_service_remove_filter_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_filter_name(const std::string& val);

  bool operator == (const rpc_service_remove_filter_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_filter_pargs {
 public:


  virtual ~rpc_service_remove_filter_pargs() throw();
  const int64_t* multilog_id;
  const std::string* filter_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_filter_result__isset {
  _rpc_service_remove_filter_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_filter_result__isset;

class rpc_service_remove_filter_result {
 public:

  rpc_service_remove_filter_result(const rpc_service_remove_filter_result&);
  rpc_service_remove_filter_result& operator=(const rpc_service_remove_filter_result&);
  rpc_service_remove_filter_result() {
  }

  virtual ~rpc_service_remove_filter_result() throw();
  rpc_management_exception ex;

  _rpc_service_remove_filter_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_remove_filter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_filter_presult__isset {
  _rpc_service_remove_filter_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_filter_presult__isset;

class rpc_service_remove_filter_presult {
 public:


  virtual ~rpc_service_remove_filter_presult() throw();
  rpc_management_exception ex;

  _rpc_service_remove_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_add_aggregate_args__isset {
  _rpc_service_add_aggregate_args__isset() : mutlilog_id(false), aggregate_name(false), filter_name(false), aggregate_expr(false) {}
  bool mutlilog_id :1;
  bool aggregate_name :1;
  bool filter_name :1;
  bool aggregate_expr :1;
} _rpc_service_add_aggregate_args__isset;

class rpc_service_add_aggregate_args {
 public:

  rpc_service_add_aggregate_args(const rpc_service_add_aggregate_args&);
  rpc_service_add_aggregate_args& operator=(const rpc_service_add_aggregate_args&);
  rpc_service_add_aggregate_args() : mutlilog_id(0), aggregate_name(), filter_name(), aggregate_expr() {
  }

  virtual ~rpc_service_add_aggregate_args() throw();
  int64_t mutlilog_id;
  std::string aggregate_name;
  std::string filter_name;
  std::string aggregate_expr;

  _rpc_service_add_aggregate_args__isset __isset;

  void __set_mutlilog_id(const int64_t val);

  void __set_aggregate_name(const std::string& val);

  void __set_filter_name(const std::string& val);

  void __set_aggregate_expr(const std::string& val);

  bool operator == (const rpc_service_add_aggregate_args & rhs) const
  {
    if (!(mutlilog_id == rhs.mutlilog_id))
      return false;
    if (!(aggregate_name == rhs.aggregate_name))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(aggregate_expr == rhs.aggregate_expr))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_aggregate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_add_aggregate_pargs {
 public:


  virtual ~rpc_service_add_aggregate_pargs() throw();
  const int64_t* mutlilog_id;
  const std::string* aggregate_name;
  const std::string* filter_name;
  const std::string* aggregate_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_aggregate_result__isset {
  _rpc_service_add_aggregate_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_aggregate_result__isset;

class rpc_service_add_aggregate_result {
 public:

  rpc_service_add_aggregate_result(const rpc_service_add_aggregate_result&);
  rpc_service_add_aggregate_result& operator=(const rpc_service_add_aggregate_result&);
  rpc_service_add_aggregate_result() {
  }

  virtual ~rpc_service_add_aggregate_result() throw();
  rpc_management_exception ex;

  _rpc_service_add_aggregate_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_add_aggregate_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_aggregate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_aggregate_presult__isset {
  _rpc_service_add_aggregate_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_aggregate_presult__isset;

class rpc_service_add_aggregate_presult {
 public:


  virtual ~rpc_service_add_aggregate_presult() throw();
  rpc_management_exception ex;

  _rpc_service_add_aggregate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_remove_aggregate_args__isset {
  _rpc_service_remove_aggregate_args__isset() : multilog_id(false), aggregate_name(false) {}
  bool multilog_id :1;
  bool aggregate_name :1;
} _rpc_service_remove_aggregate_args__isset;

class rpc_service_remove_aggregate_args {
 public:

  rpc_service_remove_aggregate_args(const rpc_service_remove_aggregate_args&);
  rpc_service_remove_aggregate_args& operator=(const rpc_service_remove_aggregate_args&);
  rpc_service_remove_aggregate_args() : multilog_id(0), aggregate_name() {
  }

  virtual ~rpc_service_remove_aggregate_args() throw();
  int64_t multilog_id;
  std::string aggregate_name;

  _rpc_service_remove_aggregate_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_aggregate_name(const std::string& val);

  bool operator == (const rpc_service_remove_aggregate_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(aggregate_name == rhs.aggregate_name))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_aggregate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_aggregate_pargs {
 public:


  virtual ~rpc_service_remove_aggregate_pargs() throw();
  const int64_t* multilog_id;
  const std::string* aggregate_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_aggregate_result {
 public:

  rpc_service_remove_aggregate_result(const rpc_service_remove_aggregate_result&);
  rpc_service_remove_aggregate_result& operator=(const rpc_service_remove_aggregate_result&);
  rpc_service_remove_aggregate_result() {
  }

  virtual ~rpc_service_remove_aggregate_result() throw();

  bool operator == (const rpc_service_remove_aggregate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_service_remove_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_aggregate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_aggregate_presult {
 public:


  virtual ~rpc_service_remove_aggregate_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_add_trigger_args__isset {
  _rpc_service_add_trigger_args__isset() : multilog_id(false), trigger_name(false), trigger_expr(false) {}
  bool multilog_id :1;
  bool trigger_name :1;
  bool trigger_expr :1;
} _rpc_service_add_trigger_args__isset;

class rpc_service_add_trigger_args {
 public:

  rpc_service_add_trigger_args(const rpc_service_add_trigger_args&);
  rpc_service_add_trigger_args& operator=(const rpc_service_add_trigger_args&);
  rpc_service_add_trigger_args() : multilog_id(0), trigger_name(), trigger_expr() {
  }

  virtual ~rpc_service_add_trigger_args() throw();
  int64_t multilog_id;
  std::string trigger_name;
  std::string trigger_expr;

  _rpc_service_add_trigger_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_trigger_name(const std::string& val);

  void __set_trigger_expr(const std::string& val);

  bool operator == (const rpc_service_add_trigger_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(trigger_name == rhs.trigger_name))
      return false;
    if (!(trigger_expr == rhs.trigger_expr))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_trigger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_trigger_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_add_trigger_pargs {
 public:


  virtual ~rpc_service_add_trigger_pargs() throw();
  const int64_t* multilog_id;
  const std::string* trigger_name;
  const std::string* trigger_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_trigger_result__isset {
  _rpc_service_add_trigger_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_trigger_result__isset;

class rpc_service_add_trigger_result {
 public:

  rpc_service_add_trigger_result(const rpc_service_add_trigger_result&);
  rpc_service_add_trigger_result& operator=(const rpc_service_add_trigger_result&);
  rpc_service_add_trigger_result() {
  }

  virtual ~rpc_service_add_trigger_result() throw();
  rpc_management_exception ex;

  _rpc_service_add_trigger_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_add_trigger_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_add_trigger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_add_trigger_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_add_trigger_presult__isset {
  _rpc_service_add_trigger_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_add_trigger_presult__isset;

class rpc_service_add_trigger_presult {
 public:


  virtual ~rpc_service_add_trigger_presult() throw();
  rpc_management_exception ex;

  _rpc_service_add_trigger_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_remove_trigger_args__isset {
  _rpc_service_remove_trigger_args__isset() : multilog_id(false), trigger_name(false) {}
  bool multilog_id :1;
  bool trigger_name :1;
} _rpc_service_remove_trigger_args__isset;

class rpc_service_remove_trigger_args {
 public:

  rpc_service_remove_trigger_args(const rpc_service_remove_trigger_args&);
  rpc_service_remove_trigger_args& operator=(const rpc_service_remove_trigger_args&);
  rpc_service_remove_trigger_args() : multilog_id(0), trigger_name() {
  }

  virtual ~rpc_service_remove_trigger_args() throw();
  int64_t multilog_id;
  std::string trigger_name;

  _rpc_service_remove_trigger_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_trigger_name(const std::string& val);

  bool operator == (const rpc_service_remove_trigger_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(trigger_name == rhs.trigger_name))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_trigger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_trigger_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_remove_trigger_pargs {
 public:


  virtual ~rpc_service_remove_trigger_pargs() throw();
  const int64_t* multilog_id;
  const std::string* trigger_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_trigger_result__isset {
  _rpc_service_remove_trigger_result__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_trigger_result__isset;

class rpc_service_remove_trigger_result {
 public:

  rpc_service_remove_trigger_result(const rpc_service_remove_trigger_result&);
  rpc_service_remove_trigger_result& operator=(const rpc_service_remove_trigger_result&);
  rpc_service_remove_trigger_result() {
  }

  virtual ~rpc_service_remove_trigger_result() throw();
  rpc_management_exception ex;

  _rpc_service_remove_trigger_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const rpc_service_remove_trigger_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_remove_trigger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_remove_trigger_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_remove_trigger_presult__isset {
  _rpc_service_remove_trigger_presult__isset() : ex(false) {}
  bool ex :1;
} _rpc_service_remove_trigger_presult__isset;

class rpc_service_remove_trigger_presult {
 public:


  virtual ~rpc_service_remove_trigger_presult() throw();
  rpc_management_exception ex;

  _rpc_service_remove_trigger_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_append_args__isset {
  _rpc_service_append_args__isset() : multilog_id(false), data(false) {}
  bool multilog_id :1;
  bool data :1;
} _rpc_service_append_args__isset;

class rpc_service_append_args {
 public:

  rpc_service_append_args(const rpc_service_append_args&);
  rpc_service_append_args& operator=(const rpc_service_append_args&);
  rpc_service_append_args() : multilog_id(0), data() {
  }

  virtual ~rpc_service_append_args() throw();
  int64_t multilog_id;
  std::string data;

  _rpc_service_append_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const rpc_service_append_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const rpc_service_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_append_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_append_pargs {
 public:


  virtual ~rpc_service_append_pargs() throw();
  const int64_t* multilog_id;
  const std::string* data;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_append_result__isset {
  _rpc_service_append_result__isset() : success(false) {}
  bool success :1;
} _rpc_service_append_result__isset;

class rpc_service_append_result {
 public:

  rpc_service_append_result(const rpc_service_append_result&);
  rpc_service_append_result& operator=(const rpc_service_append_result&);
  rpc_service_append_result() : success(0) {
  }

  virtual ~rpc_service_append_result() throw();
  int64_t success;

  _rpc_service_append_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const rpc_service_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_append_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_append_presult__isset {
  _rpc_service_append_presult__isset() : success(false) {}
  bool success :1;
} _rpc_service_append_presult__isset;

class rpc_service_append_presult {
 public:


  virtual ~rpc_service_append_presult() throw();
  int64_t* success;

  _rpc_service_append_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_append_batch_args__isset {
  _rpc_service_append_batch_args__isset() : multilog_id(false), batch(false) {}
  bool multilog_id :1;
  bool batch :1;
} _rpc_service_append_batch_args__isset;

class rpc_service_append_batch_args {
 public:

  rpc_service_append_batch_args(const rpc_service_append_batch_args&);
  rpc_service_append_batch_args& operator=(const rpc_service_append_batch_args&);
  rpc_service_append_batch_args() : multilog_id(0) {
  }

  virtual ~rpc_service_append_batch_args() throw();
  int64_t multilog_id;
  rpc_record_batch batch;

  _rpc_service_append_batch_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_batch(const rpc_record_batch& val);

  bool operator == (const rpc_service_append_batch_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const rpc_service_append_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_append_batch_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_append_batch_pargs {
 public:


  virtual ~rpc_service_append_batch_pargs() throw();
  const int64_t* multilog_id;
  const rpc_record_batch* batch;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_append_batch_result__isset {
  _rpc_service_append_batch_result__isset() : success(false) {}
  bool success :1;
} _rpc_service_append_batch_result__isset;

class rpc_service_append_batch_result {
 public:

  rpc_service_append_batch_result(const rpc_service_append_batch_result&);
  rpc_service_append_batch_result& operator=(const rpc_service_append_batch_result&);
  rpc_service_append_batch_result() : success(0) {
  }

  virtual ~rpc_service_append_batch_result() throw();
  int64_t success;

  _rpc_service_append_batch_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const rpc_service_append_batch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_append_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_append_batch_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_append_batch_presult__isset {
  _rpc_service_append_batch_presult__isset() : success(false) {}
  bool success :1;
} _rpc_service_append_batch_presult__isset;

class rpc_service_append_batch_presult {
 public:


  virtual ~rpc_service_append_batch_presult() throw();
  int64_t* success;

  _rpc_service_append_batch_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_read_args__isset {
  _rpc_service_read_args__isset() : multilog_id(false), offset(false), nrecords(false) {}
  bool multilog_id :1;
  bool offset :1;
  bool nrecords :1;
} _rpc_service_read_args__isset;

class rpc_service_read_args {
 public:

  rpc_service_read_args(const rpc_service_read_args&);
  rpc_service_read_args& operator=(const rpc_service_read_args&);
  rpc_service_read_args() : multilog_id(0), offset(0), nrecords(0) {
  }

  virtual ~rpc_service_read_args() throw();
  int64_t multilog_id;
  int64_t offset;
  int64_t nrecords;

  _rpc_service_read_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_nrecords(const int64_t val);

  bool operator == (const rpc_service_read_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(nrecords == rhs.nrecords))
      return false;
    return true;
  }
  bool operator != (const rpc_service_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_read_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_read_pargs {
 public:


  virtual ~rpc_service_read_pargs() throw();
  const int64_t* multilog_id;
  const int64_t* offset;
  const int64_t* nrecords;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_read_result__isset {
  _rpc_service_read_result__isset() : success(false) {}
  bool success :1;
} _rpc_service_read_result__isset;

class rpc_service_read_result {
 public:

  rpc_service_read_result(const rpc_service_read_result&);
  rpc_service_read_result& operator=(const rpc_service_read_result&);
  rpc_service_read_result() : success() {
  }

  virtual ~rpc_service_read_result() throw();
  std::string success;

  _rpc_service_read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const rpc_service_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_read_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_read_presult__isset {
  _rpc_service_read_presult__isset() : success(false) {}
  bool success :1;
} _rpc_service_read_presult__isset;

class rpc_service_read_presult {
 public:


  virtual ~rpc_service_read_presult() throw();
  std::string* success;

  _rpc_service_read_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_query_aggregate_args__isset {
  _rpc_service_query_aggregate_args__isset() : multilog_id(false), aggregate_name(false), begin_ms(false), end_ms(false) {}
  bool multilog_id :1;
  bool aggregate_name :1;
  bool begin_ms :1;
  bool end_ms :1;
} _rpc_service_query_aggregate_args__isset;

class rpc_service_query_aggregate_args {
 public:

  rpc_service_query_aggregate_args(const rpc_service_query_aggregate_args&);
  rpc_service_query_aggregate_args& operator=(const rpc_service_query_aggregate_args&);
  rpc_service_query_aggregate_args() : multilog_id(0), aggregate_name(), begin_ms(0), end_ms(0) {
  }

  virtual ~rpc_service_query_aggregate_args() throw();
  int64_t multilog_id;
  std::string aggregate_name;
  int64_t begin_ms;
  int64_t end_ms;

  _rpc_service_query_aggregate_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_aggregate_name(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const rpc_service_query_aggregate_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(aggregate_name == rhs.aggregate_name))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_service_query_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_query_aggregate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_query_aggregate_pargs {
 public:


  virtual ~rpc_service_query_aggregate_pargs() throw();
  const int64_t* multilog_id;
  const std::string* aggregate_name;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_query_aggregate_result__isset {
  _rpc_service_query_aggregate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_query_aggregate_result__isset;

class rpc_service_query_aggregate_result {
 public:

  rpc_service_query_aggregate_result(const rpc_service_query_aggregate_result&);
  rpc_service_query_aggregate_result& operator=(const rpc_service_query_aggregate_result&);
  rpc_service_query_aggregate_result() : success() {
  }

  virtual ~rpc_service_query_aggregate_result() throw();
  std::string success;
  rpc_invalid_operation ex;

  _rpc_service_query_aggregate_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_query_aggregate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_query_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_query_aggregate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_query_aggregate_presult__isset {
  _rpc_service_query_aggregate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_query_aggregate_presult__isset;

class rpc_service_query_aggregate_presult {
 public:


  virtual ~rpc_service_query_aggregate_presult() throw();
  std::string* success;
  rpc_invalid_operation ex;

  _rpc_service_query_aggregate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_adhoc_aggregate_args__isset {
  _rpc_service_adhoc_aggregate_args__isset() : multilog_id(false), aggregate_expr(false), filter_expr(false) {}
  bool multilog_id :1;
  bool aggregate_expr :1;
  bool filter_expr :1;
} _rpc_service_adhoc_aggregate_args__isset;

class rpc_service_adhoc_aggregate_args {
 public:

  rpc_service_adhoc_aggregate_args(const rpc_service_adhoc_aggregate_args&);
  rpc_service_adhoc_aggregate_args& operator=(const rpc_service_adhoc_aggregate_args&);
  rpc_service_adhoc_aggregate_args() : multilog_id(0), aggregate_expr(), filter_expr() {
  }

  virtual ~rpc_service_adhoc_aggregate_args() throw();
  int64_t multilog_id;
  std::string aggregate_expr;
  std::string filter_expr;

  _rpc_service_adhoc_aggregate_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_aggregate_expr(const std::string& val);

  void __set_filter_expr(const std::string& val);

  bool operator == (const rpc_service_adhoc_aggregate_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(aggregate_expr == rhs.aggregate_expr))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    return true;
  }
  bool operator != (const rpc_service_adhoc_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_adhoc_aggregate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_adhoc_aggregate_pargs {
 public:


  virtual ~rpc_service_adhoc_aggregate_pargs() throw();
  const int64_t* multilog_id;
  const std::string* aggregate_expr;
  const std::string* filter_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_adhoc_aggregate_result__isset {
  _rpc_service_adhoc_aggregate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_adhoc_aggregate_result__isset;

class rpc_service_adhoc_aggregate_result {
 public:

  rpc_service_adhoc_aggregate_result(const rpc_service_adhoc_aggregate_result&);
  rpc_service_adhoc_aggregate_result& operator=(const rpc_service_adhoc_aggregate_result&);
  rpc_service_adhoc_aggregate_result() : success() {
  }

  virtual ~rpc_service_adhoc_aggregate_result() throw();
  std::string success;
  rpc_invalid_operation ex;

  _rpc_service_adhoc_aggregate_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_adhoc_aggregate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_adhoc_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_adhoc_aggregate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_adhoc_aggregate_presult__isset {
  _rpc_service_adhoc_aggregate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_adhoc_aggregate_presult__isset;

class rpc_service_adhoc_aggregate_presult {
 public:


  virtual ~rpc_service_adhoc_aggregate_presult() throw();
  std::string* success;
  rpc_invalid_operation ex;

  _rpc_service_adhoc_aggregate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_adhoc_filter_args__isset {
  _rpc_service_adhoc_filter_args__isset() : multilog_id(false), filter_expr(false) {}
  bool multilog_id :1;
  bool filter_expr :1;
} _rpc_service_adhoc_filter_args__isset;

class rpc_service_adhoc_filter_args {
 public:

  rpc_service_adhoc_filter_args(const rpc_service_adhoc_filter_args&);
  rpc_service_adhoc_filter_args& operator=(const rpc_service_adhoc_filter_args&);
  rpc_service_adhoc_filter_args() : multilog_id(0), filter_expr() {
  }

  virtual ~rpc_service_adhoc_filter_args() throw();
  int64_t multilog_id;
  std::string filter_expr;

  _rpc_service_adhoc_filter_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_filter_expr(const std::string& val);

  bool operator == (const rpc_service_adhoc_filter_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    return true;
  }
  bool operator != (const rpc_service_adhoc_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_adhoc_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_adhoc_filter_pargs {
 public:


  virtual ~rpc_service_adhoc_filter_pargs() throw();
  const int64_t* multilog_id;
  const std::string* filter_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_adhoc_filter_result__isset {
  _rpc_service_adhoc_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_adhoc_filter_result__isset;

class rpc_service_adhoc_filter_result {
 public:

  rpc_service_adhoc_filter_result(const rpc_service_adhoc_filter_result&);
  rpc_service_adhoc_filter_result& operator=(const rpc_service_adhoc_filter_result&);
  rpc_service_adhoc_filter_result() {
  }

  virtual ~rpc_service_adhoc_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_adhoc_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_adhoc_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_adhoc_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_adhoc_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_adhoc_filter_presult__isset {
  _rpc_service_adhoc_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_adhoc_filter_presult__isset;

class rpc_service_adhoc_filter_presult {
 public:


  virtual ~rpc_service_adhoc_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_adhoc_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_predef_filter_args__isset {
  _rpc_service_predef_filter_args__isset() : multilog_id(false), filter_name(false), begin_ms(false), end_ms(false) {}
  bool multilog_id :1;
  bool filter_name :1;
  bool begin_ms :1;
  bool end_ms :1;
} _rpc_service_predef_filter_args__isset;

class rpc_service_predef_filter_args {
 public:

  rpc_service_predef_filter_args(const rpc_service_predef_filter_args&);
  rpc_service_predef_filter_args& operator=(const rpc_service_predef_filter_args&);
  rpc_service_predef_filter_args() : multilog_id(0), filter_name(), begin_ms(0), end_ms(0) {
  }

  virtual ~rpc_service_predef_filter_args() throw();
  int64_t multilog_id;
  std::string filter_name;
  int64_t begin_ms;
  int64_t end_ms;

  _rpc_service_predef_filter_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_filter_name(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const rpc_service_predef_filter_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_service_predef_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_predef_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_predef_filter_pargs {
 public:


  virtual ~rpc_service_predef_filter_pargs() throw();
  const int64_t* multilog_id;
  const std::string* filter_name;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_predef_filter_result__isset {
  _rpc_service_predef_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_predef_filter_result__isset;

class rpc_service_predef_filter_result {
 public:

  rpc_service_predef_filter_result(const rpc_service_predef_filter_result&);
  rpc_service_predef_filter_result& operator=(const rpc_service_predef_filter_result&);
  rpc_service_predef_filter_result() {
  }

  virtual ~rpc_service_predef_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_predef_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_predef_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_predef_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_predef_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_predef_filter_presult__isset {
  _rpc_service_predef_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_predef_filter_presult__isset;

class rpc_service_predef_filter_presult {
 public:


  virtual ~rpc_service_predef_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_predef_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_combined_filter_args__isset {
  _rpc_service_combined_filter_args__isset() : multilog_id(false), filter_name(false), filter_expr(false), begin_ms(false), end_ms(false) {}
  bool multilog_id :1;
  bool filter_name :1;
  bool filter_expr :1;
  bool begin_ms :1;
  bool end_ms :1;
} _rpc_service_combined_filter_args__isset;

class rpc_service_combined_filter_args {
 public:

  rpc_service_combined_filter_args(const rpc_service_combined_filter_args&);
  rpc_service_combined_filter_args& operator=(const rpc_service_combined_filter_args&);
  rpc_service_combined_filter_args() : multilog_id(0), filter_name(), filter_expr(), begin_ms(0), end_ms(0) {
  }

  virtual ~rpc_service_combined_filter_args() throw();
  int64_t multilog_id;
  std::string filter_name;
  std::string filter_expr;
  int64_t begin_ms;
  int64_t end_ms;

  _rpc_service_combined_filter_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_filter_name(const std::string& val);

  void __set_filter_expr(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const rpc_service_combined_filter_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_service_combined_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_combined_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_combined_filter_pargs {
 public:


  virtual ~rpc_service_combined_filter_pargs() throw();
  const int64_t* multilog_id;
  const std::string* filter_name;
  const std::string* filter_expr;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_combined_filter_result__isset {
  _rpc_service_combined_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_combined_filter_result__isset;

class rpc_service_combined_filter_result {
 public:

  rpc_service_combined_filter_result(const rpc_service_combined_filter_result&);
  rpc_service_combined_filter_result& operator=(const rpc_service_combined_filter_result&);
  rpc_service_combined_filter_result() {
  }

  virtual ~rpc_service_combined_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_combined_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_combined_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_combined_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_combined_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_combined_filter_presult__isset {
  _rpc_service_combined_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_combined_filter_presult__isset;

class rpc_service_combined_filter_presult {
 public:


  virtual ~rpc_service_combined_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_combined_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_alerts_by_time_args__isset {
  _rpc_service_alerts_by_time_args__isset() : multilog_id(false), begin_ms(false), end_ms(false) {}
  bool multilog_id :1;
  bool begin_ms :1;
  bool end_ms :1;
} _rpc_service_alerts_by_time_args__isset;

class rpc_service_alerts_by_time_args {
 public:

  rpc_service_alerts_by_time_args(const rpc_service_alerts_by_time_args&);
  rpc_service_alerts_by_time_args& operator=(const rpc_service_alerts_by_time_args&);
  rpc_service_alerts_by_time_args() : multilog_id(0), begin_ms(0), end_ms(0) {
  }

  virtual ~rpc_service_alerts_by_time_args() throw();
  int64_t multilog_id;
  int64_t begin_ms;
  int64_t end_ms;

  _rpc_service_alerts_by_time_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const rpc_service_alerts_by_time_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_service_alerts_by_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_alerts_by_time_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_alerts_by_time_pargs {
 public:


  virtual ~rpc_service_alerts_by_time_pargs() throw();
  const int64_t* multilog_id;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_alerts_by_time_result__isset {
  _rpc_service_alerts_by_time_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_alerts_by_time_result__isset;

class rpc_service_alerts_by_time_result {
 public:

  rpc_service_alerts_by_time_result(const rpc_service_alerts_by_time_result&);
  rpc_service_alerts_by_time_result& operator=(const rpc_service_alerts_by_time_result&);
  rpc_service_alerts_by_time_result() {
  }

  virtual ~rpc_service_alerts_by_time_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_alerts_by_time_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_alerts_by_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_alerts_by_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_alerts_by_time_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_alerts_by_time_presult__isset {
  _rpc_service_alerts_by_time_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_alerts_by_time_presult__isset;

class rpc_service_alerts_by_time_presult {
 public:


  virtual ~rpc_service_alerts_by_time_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_alerts_by_time_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_alerts_by_trigger_and_time_args__isset {
  _rpc_service_alerts_by_trigger_and_time_args__isset() : multilog_id(false), trigger_name(false), begin_ms(false), end_ms(false) {}
  bool multilog_id :1;
  bool trigger_name :1;
  bool begin_ms :1;
  bool end_ms :1;
} _rpc_service_alerts_by_trigger_and_time_args__isset;

class rpc_service_alerts_by_trigger_and_time_args {
 public:

  rpc_service_alerts_by_trigger_and_time_args(const rpc_service_alerts_by_trigger_and_time_args&);
  rpc_service_alerts_by_trigger_and_time_args& operator=(const rpc_service_alerts_by_trigger_and_time_args&);
  rpc_service_alerts_by_trigger_and_time_args() : multilog_id(0), trigger_name(), begin_ms(0), end_ms(0) {
  }

  virtual ~rpc_service_alerts_by_trigger_and_time_args() throw();
  int64_t multilog_id;
  std::string trigger_name;
  int64_t begin_ms;
  int64_t end_ms;

  _rpc_service_alerts_by_trigger_and_time_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_trigger_name(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const rpc_service_alerts_by_trigger_and_time_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(trigger_name == rhs.trigger_name))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_service_alerts_by_trigger_and_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_alerts_by_trigger_and_time_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_alerts_by_trigger_and_time_pargs {
 public:


  virtual ~rpc_service_alerts_by_trigger_and_time_pargs() throw();
  const int64_t* multilog_id;
  const std::string* trigger_name;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_alerts_by_trigger_and_time_result__isset {
  _rpc_service_alerts_by_trigger_and_time_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_alerts_by_trigger_and_time_result__isset;

class rpc_service_alerts_by_trigger_and_time_result {
 public:

  rpc_service_alerts_by_trigger_and_time_result(const rpc_service_alerts_by_trigger_and_time_result&);
  rpc_service_alerts_by_trigger_and_time_result& operator=(const rpc_service_alerts_by_trigger_and_time_result&);
  rpc_service_alerts_by_trigger_and_time_result() {
  }

  virtual ~rpc_service_alerts_by_trigger_and_time_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_alerts_by_trigger_and_time_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_alerts_by_trigger_and_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_alerts_by_trigger_and_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_alerts_by_trigger_and_time_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_alerts_by_trigger_and_time_presult__isset {
  _rpc_service_alerts_by_trigger_and_time_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_alerts_by_trigger_and_time_presult__isset;

class rpc_service_alerts_by_trigger_and_time_presult {
 public:


  virtual ~rpc_service_alerts_by_trigger_and_time_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_alerts_by_trigger_and_time_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_get_more_args__isset {
  _rpc_service_get_more_args__isset() : multilog_id(false), desc(false) {}
  bool multilog_id :1;
  bool desc :1;
} _rpc_service_get_more_args__isset;

class rpc_service_get_more_args {
 public:

  rpc_service_get_more_args(const rpc_service_get_more_args&);
  rpc_service_get_more_args& operator=(const rpc_service_get_more_args&);
  rpc_service_get_more_args() : multilog_id(0) {
  }

  virtual ~rpc_service_get_more_args() throw();
  int64_t multilog_id;
  rpc_iterator_descriptor desc;

  _rpc_service_get_more_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  void __set_desc(const rpc_iterator_descriptor& val);

  bool operator == (const rpc_service_get_more_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const rpc_service_get_more_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_get_more_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_get_more_pargs {
 public:


  virtual ~rpc_service_get_more_pargs() throw();
  const int64_t* multilog_id;
  const rpc_iterator_descriptor* desc;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_get_more_result__isset {
  _rpc_service_get_more_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_get_more_result__isset;

class rpc_service_get_more_result {
 public:

  rpc_service_get_more_result(const rpc_service_get_more_result&);
  rpc_service_get_more_result& operator=(const rpc_service_get_more_result&);
  rpc_service_get_more_result() {
  }

  virtual ~rpc_service_get_more_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _rpc_service_get_more_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const rpc_service_get_more_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const rpc_service_get_more_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_get_more_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_get_more_presult__isset {
  _rpc_service_get_more_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _rpc_service_get_more_presult__isset;

class rpc_service_get_more_presult {
 public:


  virtual ~rpc_service_get_more_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _rpc_service_get_more_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _rpc_service_num_records_args__isset {
  _rpc_service_num_records_args__isset() : multilog_id(false) {}
  bool multilog_id :1;
} _rpc_service_num_records_args__isset;

class rpc_service_num_records_args {
 public:

  rpc_service_num_records_args(const rpc_service_num_records_args&);
  rpc_service_num_records_args& operator=(const rpc_service_num_records_args&);
  rpc_service_num_records_args() : multilog_id(0) {
  }

  virtual ~rpc_service_num_records_args() throw();
  int64_t multilog_id;

  _rpc_service_num_records_args__isset __isset;

  void __set_multilog_id(const int64_t val);

  bool operator == (const rpc_service_num_records_args & rhs) const
  {
    if (!(multilog_id == rhs.multilog_id))
      return false;
    return true;
  }
  bool operator != (const rpc_service_num_records_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_num_records_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class rpc_service_num_records_pargs {
 public:


  virtual ~rpc_service_num_records_pargs() throw();
  const int64_t* multilog_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_num_records_result__isset {
  _rpc_service_num_records_result__isset() : success(false) {}
  bool success :1;
} _rpc_service_num_records_result__isset;

class rpc_service_num_records_result {
 public:

  rpc_service_num_records_result(const rpc_service_num_records_result&);
  rpc_service_num_records_result& operator=(const rpc_service_num_records_result&);
  rpc_service_num_records_result() : success(0) {
  }

  virtual ~rpc_service_num_records_result() throw();
  int64_t success;

  _rpc_service_num_records_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const rpc_service_num_records_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_num_records_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_num_records_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _rpc_service_num_records_presult__isset {
  _rpc_service_num_records_presult__isset() : success(false) {}
  bool success :1;
} _rpc_service_num_records_presult__isset;

class rpc_service_num_records_presult {
 public:


  virtual ~rpc_service_num_records_presult() throw();
  int64_t* success;

  _rpc_service_num_records_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class rpc_serviceClientT : virtual public rpc_serviceIf {
 public:
  rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void register_handler();
  void send_register_handler();
  void recv_register_handler();
  void deregister_handler();
  void send_deregister_handler();
  void recv_deregister_handler();
  int64_t create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode);
  void send_create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode);
  int64_t recv_create_atomic_multilog();
  void get_atomic_multilog_info(rpc_atomic_multilog_info& _return, const std::string& name);
  void send_get_atomic_multilog_info(const std::string& name);
  void recv_get_atomic_multilog_info(rpc_atomic_multilog_info& _return);
  void remove_atomic_multilog(const int64_t multilog_id);
  void send_remove_atomic_multilog(const int64_t multilog_id);
  void recv_remove_atomic_multilog();
  void add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size);
  void send_add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size);
  void recv_add_index();
  void remove_index(const int64_t multilog_id, const std::string& field_name);
  void send_remove_index(const int64_t multilog_id, const std::string& field_name);
  void recv_remove_index();
  void add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr);
  void send_add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr);
  void recv_add_filter();
  void remove_filter(const int64_t multilog_id, const std::string& filter_name);
  void send_remove_filter(const int64_t multilog_id, const std::string& filter_name);
  void recv_remove_filter();
  void add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr);
  void send_add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr);
  void recv_add_aggregate();
  void remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name);
  void send_remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name);
  void recv_remove_aggregate();
  void add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr);
  void send_add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr);
  void recv_add_trigger();
  void remove_trigger(const int64_t multilog_id, const std::string& trigger_name);
  void send_remove_trigger(const int64_t multilog_id, const std::string& trigger_name);
  void recv_remove_trigger();
  int64_t append(const int64_t multilog_id, const std::string& data);
  void send_append(const int64_t multilog_id, const std::string& data);
  int64_t recv_append();
  int64_t append_batch(const int64_t multilog_id, const rpc_record_batch& batch);
  void send_append_batch(const int64_t multilog_id, const rpc_record_batch& batch);
  int64_t recv_append_batch();
  void read(std::string& _return, const int64_t multilog_id, const int64_t offset, const int64_t nrecords);
  void send_read(const int64_t multilog_id, const int64_t offset, const int64_t nrecords);
  void recv_read(std::string& _return);
  void query_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms);
  void send_query_aggregate(const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_query_aggregate(std::string& _return);
  void adhoc_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr);
  void send_adhoc_aggregate(const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr);
  void recv_adhoc_aggregate(std::string& _return);
  void adhoc_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_expr);
  void send_adhoc_filter(const int64_t multilog_id, const std::string& filter_expr);
  void recv_adhoc_filter(rpc_iterator_handle& _return);
  void predef_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void send_predef_filter(const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_predef_filter(rpc_iterator_handle& _return);
  void combined_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void send_combined_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void recv_combined_filter(rpc_iterator_handle& _return);
  void alerts_by_time(rpc_iterator_handle& _return, const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms);
  void send_alerts_by_time(const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_time(rpc_iterator_handle& _return);
  void alerts_by_trigger_and_time(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms);
  void send_alerts_by_trigger_and_time(const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_trigger_and_time(rpc_iterator_handle& _return);
  void get_more(rpc_iterator_handle& _return, const int64_t multilog_id, const rpc_iterator_descriptor& desc);
  void send_get_more(const int64_t multilog_id, const rpc_iterator_descriptor& desc);
  void recv_get_more(rpc_iterator_handle& _return);
  int64_t num_records(const int64_t multilog_id);
  void send_num_records(const int64_t multilog_id);
  int64_t recv_num_records();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef rpc_serviceClientT< ::apache::thrift::protocol::TProtocol> rpc_serviceClient;

template <class Protocol_>
class rpc_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (rpc_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (rpc_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_register_handler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_handler(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deregister_handler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deregister_handler(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_create_atomic_multilog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_atomic_multilog(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_atomic_multilog_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_atomic_multilog_info(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_atomic_multilog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_atomic_multilog(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_index(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_index(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_aggregate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_aggregate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_trigger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_trigger(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_trigger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_trigger(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_append_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append_batch(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_query_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_aggregate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_adhoc_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_adhoc_aggregate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_adhoc_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_adhoc_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_predef_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predef_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_combined_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_combined_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_alerts_by_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alerts_by_time(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_alerts_by_trigger_and_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alerts_by_trigger_and_time(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_more(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_more(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_num_records(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_records(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  rpc_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> iface) :
    iface_(iface) {
    processMap_["register_handler"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_register_handler,
      &rpc_serviceProcessorT::process_register_handler);
    processMap_["deregister_handler"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_deregister_handler,
      &rpc_serviceProcessorT::process_deregister_handler);
    processMap_["create_atomic_multilog"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_create_atomic_multilog,
      &rpc_serviceProcessorT::process_create_atomic_multilog);
    processMap_["get_atomic_multilog_info"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_get_atomic_multilog_info,
      &rpc_serviceProcessorT::process_get_atomic_multilog_info);
    processMap_["remove_atomic_multilog"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_remove_atomic_multilog,
      &rpc_serviceProcessorT::process_remove_atomic_multilog);
    processMap_["add_index"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_add_index,
      &rpc_serviceProcessorT::process_add_index);
    processMap_["remove_index"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_remove_index,
      &rpc_serviceProcessorT::process_remove_index);
    processMap_["add_filter"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_add_filter,
      &rpc_serviceProcessorT::process_add_filter);
    processMap_["remove_filter"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_remove_filter,
      &rpc_serviceProcessorT::process_remove_filter);
    processMap_["add_aggregate"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_add_aggregate,
      &rpc_serviceProcessorT::process_add_aggregate);
    processMap_["remove_aggregate"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_remove_aggregate,
      &rpc_serviceProcessorT::process_remove_aggregate);
    processMap_["add_trigger"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_add_trigger,
      &rpc_serviceProcessorT::process_add_trigger);
    processMap_["remove_trigger"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_remove_trigger,
      &rpc_serviceProcessorT::process_remove_trigger);
    processMap_["append"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_append,
      &rpc_serviceProcessorT::process_append);
    processMap_["append_batch"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_append_batch,
      &rpc_serviceProcessorT::process_append_batch);
    processMap_["read"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_read,
      &rpc_serviceProcessorT::process_read);
    processMap_["query_aggregate"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_query_aggregate,
      &rpc_serviceProcessorT::process_query_aggregate);
    processMap_["adhoc_aggregate"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_adhoc_aggregate,
      &rpc_serviceProcessorT::process_adhoc_aggregate);
    processMap_["adhoc_filter"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_adhoc_filter,
      &rpc_serviceProcessorT::process_adhoc_filter);
    processMap_["predef_filter"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_predef_filter,
      &rpc_serviceProcessorT::process_predef_filter);
    processMap_["combined_filter"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_combined_filter,
      &rpc_serviceProcessorT::process_combined_filter);
    processMap_["alerts_by_time"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_alerts_by_time,
      &rpc_serviceProcessorT::process_alerts_by_time);
    processMap_["alerts_by_trigger_and_time"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_alerts_by_trigger_and_time,
      &rpc_serviceProcessorT::process_alerts_by_trigger_and_time);
    processMap_["get_more"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_get_more,
      &rpc_serviceProcessorT::process_get_more);
    processMap_["num_records"] = ProcessFunctions(
      &rpc_serviceProcessorT::process_num_records,
      &rpc_serviceProcessorT::process_num_records);
  }

  virtual ~rpc_serviceProcessorT() {}
};

typedef rpc_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > rpc_serviceProcessor;

template <class Protocol_>
class rpc_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  rpc_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< rpc_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< rpc_serviceIfFactory > handlerFactory_;
};

typedef rpc_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > rpc_serviceProcessorFactory;

class rpc_serviceMultiface : virtual public rpc_serviceIf {
 public:
  rpc_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~rpc_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> > ifaces_;
  rpc_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<rpc_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void register_handler() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_handler();
    }
    ifaces_[i]->register_handler();
  }

  void deregister_handler() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deregister_handler();
    }
    ifaces_[i]->deregister_handler();
  }

  int64_t create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_atomic_multilog(name, schema, mode);
    }
    return ifaces_[i]->create_atomic_multilog(name, schema, mode);
  }

  void get_atomic_multilog_info(rpc_atomic_multilog_info& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_atomic_multilog_info(_return, name);
    }
    ifaces_[i]->get_atomic_multilog_info(_return, name);
    return;
  }

  void remove_atomic_multilog(const int64_t multilog_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_atomic_multilog(multilog_id);
    }
    ifaces_[i]->remove_atomic_multilog(multilog_id);
  }

  void add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_index(multilog_id, field_name, bucket_size);
    }
    ifaces_[i]->add_index(multilog_id, field_name, bucket_size);
  }

  void remove_index(const int64_t multilog_id, const std::string& field_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_index(multilog_id, field_name);
    }
    ifaces_[i]->remove_index(multilog_id, field_name);
  }

  void add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_filter(multilog_id, filter_name, filter_expr);
    }
    ifaces_[i]->add_filter(multilog_id, filter_name, filter_expr);
  }

  void remove_filter(const int64_t multilog_id, const std::string& filter_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_filter(multilog_id, filter_name);
    }
    ifaces_[i]->remove_filter(multilog_id, filter_name);
  }

  void add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_aggregate(mutlilog_id, aggregate_name, filter_name, aggregate_expr);
    }
    ifaces_[i]->add_aggregate(mutlilog_id, aggregate_name, filter_name, aggregate_expr);
  }

  void remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_aggregate(multilog_id, aggregate_name);
    }
    ifaces_[i]->remove_aggregate(multilog_id, aggregate_name);
  }

  void add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_trigger(multilog_id, trigger_name, trigger_expr);
    }
    ifaces_[i]->add_trigger(multilog_id, trigger_name, trigger_expr);
  }

  void remove_trigger(const int64_t multilog_id, const std::string& trigger_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_trigger(multilog_id, trigger_name);
    }
    ifaces_[i]->remove_trigger(multilog_id, trigger_name);
  }

  int64_t append(const int64_t multilog_id, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(multilog_id, data);
    }
    return ifaces_[i]->append(multilog_id, data);
  }

  int64_t append_batch(const int64_t multilog_id, const rpc_record_batch& batch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append_batch(multilog_id, batch);
    }
    return ifaces_[i]->append_batch(multilog_id, batch);
  }

  void read(std::string& _return, const int64_t multilog_id, const int64_t offset, const int64_t nrecords) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, multilog_id, offset, nrecords);
    }
    ifaces_[i]->read(_return, multilog_id, offset, nrecords);
    return;
  }

  void query_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_aggregate(_return, multilog_id, aggregate_name, begin_ms, end_ms);
    }
    ifaces_[i]->query_aggregate(_return, multilog_id, aggregate_name, begin_ms, end_ms);
    return;
  }

  void adhoc_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->adhoc_aggregate(_return, multilog_id, aggregate_expr, filter_expr);
    }
    ifaces_[i]->adhoc_aggregate(_return, multilog_id, aggregate_expr, filter_expr);
    return;
  }

  void adhoc_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->adhoc_filter(_return, multilog_id, filter_expr);
    }
    ifaces_[i]->adhoc_filter(_return, multilog_id, filter_expr);
    return;
  }

  void predef_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predef_filter(_return, multilog_id, filter_name, begin_ms, end_ms);
    }
    ifaces_[i]->predef_filter(_return, multilog_id, filter_name, begin_ms, end_ms);
    return;
  }

  void combined_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->combined_filter(_return, multilog_id, filter_name, filter_expr, begin_ms, end_ms);
    }
    ifaces_[i]->combined_filter(_return, multilog_id, filter_name, filter_expr, begin_ms, end_ms);
    return;
  }

  void alerts_by_time(rpc_iterator_handle& _return, const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alerts_by_time(_return, multilog_id, begin_ms, end_ms);
    }
    ifaces_[i]->alerts_by_time(_return, multilog_id, begin_ms, end_ms);
    return;
  }

  void alerts_by_trigger_and_time(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alerts_by_trigger_and_time(_return, multilog_id, trigger_name, begin_ms, end_ms);
    }
    ifaces_[i]->alerts_by_trigger_and_time(_return, multilog_id, trigger_name, begin_ms, end_ms);
    return;
  }

  void get_more(rpc_iterator_handle& _return, const int64_t multilog_id, const rpc_iterator_descriptor& desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_more(_return, multilog_id, desc);
    }
    ifaces_[i]->get_more(_return, multilog_id, desc);
    return;
  }

  int64_t num_records(const int64_t multilog_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_records(multilog_id);
    }
    return ifaces_[i]->num_records(multilog_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class rpc_serviceConcurrentClientT : virtual public rpc_serviceIf {
 public:
  rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void register_handler();
  int32_t send_register_handler();
  void recv_register_handler(const int32_t seqid);
  void deregister_handler();
  int32_t send_deregister_handler();
  void recv_deregister_handler(const int32_t seqid);
  int64_t create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode);
  int32_t send_create_atomic_multilog(const std::string& name, const rpc_schema& schema, const rpc_storage_mode mode);
  int64_t recv_create_atomic_multilog(const int32_t seqid);
  void get_atomic_multilog_info(rpc_atomic_multilog_info& _return, const std::string& name);
  int32_t send_get_atomic_multilog_info(const std::string& name);
  void recv_get_atomic_multilog_info(rpc_atomic_multilog_info& _return, const int32_t seqid);
  void remove_atomic_multilog(const int64_t multilog_id);
  int32_t send_remove_atomic_multilog(const int64_t multilog_id);
  void recv_remove_atomic_multilog(const int32_t seqid);
  void add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size);
  int32_t send_add_index(const int64_t multilog_id, const std::string& field_name, const double bucket_size);
  void recv_add_index(const int32_t seqid);
  void remove_index(const int64_t multilog_id, const std::string& field_name);
  int32_t send_remove_index(const int64_t multilog_id, const std::string& field_name);
  void recv_remove_index(const int32_t seqid);
  void add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr);
  int32_t send_add_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr);
  void recv_add_filter(const int32_t seqid);
  void remove_filter(const int64_t multilog_id, const std::string& filter_name);
  int32_t send_remove_filter(const int64_t multilog_id, const std::string& filter_name);
  void recv_remove_filter(const int32_t seqid);
  void add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr);
  int32_t send_add_aggregate(const int64_t mutlilog_id, const std::string& aggregate_name, const std::string& filter_name, const std::string& aggregate_expr);
  void recv_add_aggregate(const int32_t seqid);
  void remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name);
  int32_t send_remove_aggregate(const int64_t multilog_id, const std::string& aggregate_name);
  void recv_remove_aggregate(const int32_t seqid);
  void add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr);
  int32_t send_add_trigger(const int64_t multilog_id, const std::string& trigger_name, const std::string& trigger_expr);
  void recv_add_trigger(const int32_t seqid);
  void remove_trigger(const int64_t multilog_id, const std::string& trigger_name);
  int32_t send_remove_trigger(const int64_t multilog_id, const std::string& trigger_name);
  void recv_remove_trigger(const int32_t seqid);
  int64_t append(const int64_t multilog_id, const std::string& data);
  int32_t send_append(const int64_t multilog_id, const std::string& data);
  int64_t recv_append(const int32_t seqid);
  int64_t append_batch(const int64_t multilog_id, const rpc_record_batch& batch);
  int32_t send_append_batch(const int64_t multilog_id, const rpc_record_batch& batch);
  int64_t recv_append_batch(const int32_t seqid);
  void read(std::string& _return, const int64_t multilog_id, const int64_t offset, const int64_t nrecords);
  int32_t send_read(const int64_t multilog_id, const int64_t offset, const int64_t nrecords);
  void recv_read(std::string& _return, const int32_t seqid);
  void query_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_query_aggregate(const int64_t multilog_id, const std::string& aggregate_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_query_aggregate(std::string& _return, const int32_t seqid);
  void adhoc_aggregate(std::string& _return, const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr);
  int32_t send_adhoc_aggregate(const int64_t multilog_id, const std::string& aggregate_expr, const std::string& filter_expr);
  void recv_adhoc_aggregate(std::string& _return, const int32_t seqid);
  void adhoc_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_expr);
  int32_t send_adhoc_filter(const int64_t multilog_id, const std::string& filter_expr);
  void recv_adhoc_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void predef_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_predef_filter(const int64_t multilog_id, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_predef_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void combined_filter(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_combined_filter(const int64_t multilog_id, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void recv_combined_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void alerts_by_time(rpc_iterator_handle& _return, const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_alerts_by_time(const int64_t multilog_id, const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_time(rpc_iterator_handle& _return, const int32_t seqid);
  void alerts_by_trigger_and_time(rpc_iterator_handle& _return, const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_alerts_by_trigger_and_time(const int64_t multilog_id, const std::string& trigger_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_trigger_and_time(rpc_iterator_handle& _return, const int32_t seqid);
  void get_more(rpc_iterator_handle& _return, const int64_t multilog_id, const rpc_iterator_descriptor& desc);
  int32_t send_get_more(const int64_t multilog_id, const rpc_iterator_descriptor& desc);
  void recv_get_more(rpc_iterator_handle& _return, const int32_t seqid);
  int64_t num_records(const int64_t multilog_id);
  int32_t send_num_records(const int64_t multilog_id);
  int64_t recv_num_records(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef rpc_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> rpc_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "rpc_service.tcc"
#include "rpc_types.tcc"

#endif
